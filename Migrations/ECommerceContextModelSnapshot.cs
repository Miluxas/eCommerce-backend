// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCommerce_backend.Data;

namespace eCommercebackend.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    partial class ECommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eCommerce_backend.IdentityAuth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Area", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountryID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<short>("DeleteStatus")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ParentAreaID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("ParentAreaID");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Attribute", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<short>("DeleteStatus")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Attribute");
                });

            modelBuilder.Entity("eCommerce_backend.Models.AttributeItem", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AttributeID")
                        .HasColumnType("bigint");

                    b.Property<string>("Ml_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AttributeID");

                    b.ToTable("AttributeItem");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Badge", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<short>("DeleteStatus")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Brand", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<short>("DeleteStatus")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Md_Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Category", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<short>("DeleteStatus")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mm_Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Country", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<short>("DeleteStatus")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Product", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApprovedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("BrandID")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<short>("DeleteStatus")
                        .HasColumnType("smallint");

                    b.Property<bool>("HasCustomText")
                        .HasColumnType("bit");

                    b.Property<bool>("HasGiftCard")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWrapping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStandardProduct")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SizeGuildID")
                        .HasColumnType("bigint");

                    b.Property<bool>("Taxable")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BrandID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("eCommerce_backend.Models.ProductAttributeItem", b =>
                {
                    b.Property<long>("ProductID")
                        .HasColumnType("bigint");

                    b.Property<long>("AttributeItemID")
                        .HasColumnType("bigint");

                    b.HasKey("ProductID", "AttributeItemID");

                    b.HasIndex("AttributeItemID");

                    b.ToTable("ProductAttributeItem");
                });

            modelBuilder.Entity("eCommerce_backend.Models.ProductBadge", b =>
                {
                    b.Property<long>("ProductID")
                        .HasColumnType("bigint");

                    b.Property<long>("BadgeID")
                        .HasColumnType("bigint");

                    b.HasKey("ProductID", "BadgeID");

                    b.HasIndex("BadgeID");

                    b.ToTable("ProductBadge");
                });

            modelBuilder.Entity("eCommerce_backend.Models.ProductCategory", b =>
                {
                    b.Property<long>("ProductID")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryID")
                        .HasColumnType("bigint");

                    b.HasKey("ProductID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("eCommerce_backend.Models.ProductCountry", b =>
                {
                    b.Property<long>("ProductID")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryID")
                        .HasColumnType("bigint");

                    b.HasKey("ProductID", "CountryID");

                    b.HasIndex("CountryID");

                    b.ToTable("ProductCountry");
                });

            modelBuilder.Entity("eCommerce_backend.Models.ProductStore", b =>
                {
                    b.Property<long>("ProductID")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryID")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreID")
                        .HasColumnType("bigint");

                    b.HasKey("ProductID", "CountryID", "StoreID");

                    b.HasIndex("CountryID");

                    b.HasIndex("StoreID");

                    b.ToTable("ProductStore");
                });

            modelBuilder.Entity("eCommerce_backend.Models.ProductSupplier", b =>
                {
                    b.Property<long>("ProductID")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryID")
                        .HasColumnType("bigint");

                    b.Property<long>("SupplierID")
                        .HasColumnType("bigint");

                    b.HasKey("ProductID", "CountryID", "SupplierID");

                    b.HasIndex("CountryID");

                    b.HasIndex("SupplierID");

                    b.ToTable("ProductSupplier");
                });

            modelBuilder.Entity("eCommerce_backend.Models.ProductTag", b =>
                {
                    b.Property<long>("ProductID")
                        .HasColumnType("bigint");

                    b.Property<long>("TagID")
                        .HasColumnType("bigint");

                    b.HasKey("ProductID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("ProductTag");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Purchase", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ApprovedByID")
                        .HasColumnType("bigint");

                    b.Property<string>("ApprovedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<short>("DeleteStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("InvoiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SupplierID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long>("WaerhouseID")
                        .HasColumnType("bigint");

                    b.Property<long?>("WarehouseID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("SupplierID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("eCommerce_backend.Models.PurchaseItem", b =>
                {
                    b.Property<long>("SkuID")
                        .HasColumnType("bigint");

                    b.Property<long>("PurchaseID")
                        .HasColumnType("bigint");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("SkuID", "PurchaseID");

                    b.HasIndex("PurchaseID");

                    b.ToTable("PurchaseItem");
                });

            modelBuilder.Entity("eCommerce_backend.Models.PurchaseReceive", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PurchaseID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReceiveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiveById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("ReciveByID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("PurchaseID");

                    b.HasIndex("ReceiveById");

                    b.ToTable("PurchaseReceive");
                });

            modelBuilder.Entity("eCommerce_backend.Models.PurchaseReceiveItem", b =>
                {
                    b.Property<long>("SkuID")
                        .HasColumnType("bigint");

                    b.Property<long>("PurchaseReceiveID")
                        .HasColumnType("bigint");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("SkuID", "PurchaseReceiveID");

                    b.HasIndex("PurchaseReceiveID");

                    b.ToTable("PurchaseReceiveItem");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Sku", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Md_Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductID")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("Sku");
                });

            modelBuilder.Entity("eCommerce_backend.Models.SkuVariationItem", b =>
                {
                    b.Property<long>("SkuID")
                        .HasColumnType("bigint");

                    b.Property<long>("VariationItemID")
                        .HasColumnType("bigint");

                    b.HasKey("SkuID", "VariationItemID");

                    b.HasIndex("VariationItemID");

                    b.ToTable("SkuVariationItem");
                });

            modelBuilder.Entity("eCommerce_backend.Models.StatusHistory", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<short>("DeleteStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SetAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("SetterID")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("StatusHistory");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Store", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<short>("DeleteStatus")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Md_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Supplier", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<short>("DeleteStatus")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Md_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Tag", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<short>("DeleteStatus")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Variation", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<short>("DeleteStatus")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Variation");
                });

            modelBuilder.Entity("eCommerce_backend.Models.VariationItem", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VariationID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("VariationID");

                    b.ToTable("VariationItem");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Warehouse", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<short>("DeleteStatus")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("eCommerce_backend.Models.WarehouseArea", b =>
                {
                    b.Property<long>("WarehouseID")
                        .HasColumnType("bigint");

                    b.Property<long>("AreaID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DeliveryCost")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("DeliveryMaxDay")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("WarehouseID", "AreaID");

                    b.HasIndex("AreaID");

                    b.ToTable("WarehouseArea");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Area", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Country", "Country")
                        .WithMany("Areas")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.Area", "ParentArea")
                        .WithMany()
                        .HasForeignKey("ParentAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("ParentArea");
                });

            modelBuilder.Entity("eCommerce_backend.Models.AttributeItem", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Attribute", "Attribute")
                        .WithMany("Items")
                        .HasForeignKey("AttributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Category", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Category", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Product", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("eCommerce_backend.Models.ProductAttributeItem", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Product", "Product")
                        .WithMany("ProductAttributeItems")
                        .HasForeignKey("AttributeItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.AttributeItem", "AttributeItem")
                        .WithMany("ProductAttributeItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeItem");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce_backend.Models.ProductBadge", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Product", "Product")
                        .WithMany("ProductBadges")
                        .HasForeignKey("BadgeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.Badge", "Badge")
                        .WithMany("ProductBadges")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce_backend.Models.ProductCategory", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce_backend.Models.ProductCountry", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Product", "Product")
                        .WithMany("ProductCountries")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.Country", "Country")
                        .WithMany("ProductCountries")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce_backend.Models.ProductStore", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Country", "Country")
                        .WithMany("ProductStores")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.Store", "Store")
                        .WithMany("ProductStores")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.Product", "Product")
                        .WithMany("ProductStores")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eCommerce_backend.Models.ProductSupplier", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Country", "Country")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.Supplier", "Supplier")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.Product", "Product")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("eCommerce_backend.Models.ProductTag", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Purchase", b =>
                {
                    b.HasOne("eCommerce_backend.IdentityAuth.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById");

                    b.HasOne("eCommerce_backend.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID");

                    b.Navigation("ApprovedBy");

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("eCommerce_backend.Models.PurchaseItem", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Purchase", "Purchase")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("eCommerce_backend.Models.PurchaseReceive", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Purchase", "Purchase")
                        .WithMany("PurchaseReceives")
                        .HasForeignKey("PurchaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.IdentityAuth.ApplicationUser", "ReceiveBy")
                        .WithMany()
                        .HasForeignKey("ReceiveById");

                    b.Navigation("Purchase");

                    b.Navigation("ReceiveBy");
                });

            modelBuilder.Entity("eCommerce_backend.Models.PurchaseReceiveItem", b =>
                {
                    b.HasOne("eCommerce_backend.Models.PurchaseReceive", "PurchaseReceive")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseReceiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseReceive");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Sku", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Product", "Product")
                        .WithMany("Skus")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce_backend.Models.SkuVariationItem", b =>
                {
                    b.HasOne("eCommerce_backend.Models.VariationItem", "VariationItem")
                        .WithMany("SkuVariationItems")
                        .HasForeignKey("SkuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.Sku", "Sku")
                        .WithMany("SkuVariationItems")
                        .HasForeignKey("VariationItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sku");

                    b.Navigation("VariationItem");
                });

            modelBuilder.Entity("eCommerce_backend.Models.VariationItem", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Variation", "Variation")
                        .WithMany("Items")
                        .HasForeignKey("VariationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("eCommerce_backend.Models.WarehouseArea", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Warehouse", "Warehouse")
                        .WithMany("WarehouseAreas")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.Area", "Area")
                        .WithMany("WarehouseAreas")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Area", b =>
                {
                    b.Navigation("WarehouseAreas");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Attribute", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("eCommerce_backend.Models.AttributeItem", b =>
                {
                    b.Navigation("ProductAttributeItems");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Badge", b =>
                {
                    b.Navigation("ProductBadges");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Country", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("ProductCountries");

                    b.Navigation("ProductStores");

                    b.Navigation("ProductSuppliers");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Product", b =>
                {
                    b.Navigation("ProductAttributeItems");

                    b.Navigation("ProductBadges");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductCountries");

                    b.Navigation("ProductStores");

                    b.Navigation("ProductSuppliers");

                    b.Navigation("ProductTags");

                    b.Navigation("Skus");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Purchase", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("PurchaseReceives");
                });

            modelBuilder.Entity("eCommerce_backend.Models.PurchaseReceive", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Sku", b =>
                {
                    b.Navigation("SkuVariationItems");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Store", b =>
                {
                    b.Navigation("ProductStores");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Supplier", b =>
                {
                    b.Navigation("ProductSuppliers");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Variation", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("eCommerce_backend.Models.VariationItem", b =>
                {
                    b.Navigation("SkuVariationItems");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Warehouse", b =>
                {
                    b.Navigation("WarehouseAreas");
                });
#pragma warning restore 612, 618
        }
    }
}
