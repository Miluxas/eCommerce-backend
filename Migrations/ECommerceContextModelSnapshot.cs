// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCommerce_backend.Data;

#nullable disable

namespace eCommercebackend.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    partial class ECommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eCommerce_backend.Data.Models.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Attribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attribute", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.AttributeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ml_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.ToTable("AttributeItem", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Badge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Badge", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Md_Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mm_Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18,3)");

                    b.Property<Guid>("SkuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("SkuId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventory", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Obj_ExteraDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Pay")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("Shipping")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<Guid>("SkuId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SkuId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApprovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasCustomText")
                        .HasColumnType("bit");

                    b.Property<bool>("HasGiftCard")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWrapping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStandardProduct")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SizeGuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Taxable")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.ProductAttributeItem", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "AttributeItemId");

                    b.HasIndex("AttributeItemId");

                    b.ToTable("ProductAttributeItem", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.ProductBadge", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BadgeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "BadgeId");

                    b.HasIndex("BadgeId");

                    b.ToTable("ProductBadge", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategory", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.ProductCountry", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("ProductCountry", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.ProductStore", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CountryId", "StoreId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductStore", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.ProductSupplier", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CountryId", "SupplierId");

                    b.HasIndex("CountryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductSupplier", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.ProductTag", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTag", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ApprovedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchase", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.PurchaseItem", b =>
                {
                    b.Property<Guid>("SkuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("decimal(18,5)");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("SkuId", "PurchaseId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseItem", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.PurchaseReceive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReceiveAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReceiveById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReciveById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("ReceiveById");

                    b.HasIndex("WarehouseId");

                    b.ToTable("PurchaseReceive", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.PurchaseReceiveItem", b =>
                {
                    b.Property<Guid>("SkuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseReceiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("SkuId", "PurchaseReceiveId");

                    b.HasIndex("PurchaseReceiveId");

                    b.ToTable("PurchaseReceiveItem");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Sku", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Md_Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Sku", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.SkuVariationItem", b =>
                {
                    b.Property<Guid>("SkuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VariationItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SkuId", "VariationItemId");

                    b.HasIndex("VariationItemId");

                    b.ToTable("SkuVariationItem", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.StatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SetAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SetterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SetterId");

                    b.ToTable("StatusHistory", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Md_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Store", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Md_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Variation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Variation", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.VariationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VariationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VariationId");

                    b.ToTable("VariationItem", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeleteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ml_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouse", (string)null);
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.WarehouseArea", b =>
                {
                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DeliveryCost")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("DeliveryMaxDay")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("WarehouseId", "AreaId");

                    b.HasIndex("AreaId");

                    b.ToTable("WarehouseArea");
                });

            modelBuilder.Entity("eCommerce_backend.IdentityAuth.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Area", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Country", "Country")
                        .WithMany("Areas")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.AttributeItem", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Attribute", "Attribute")
                        .WithMany("Items")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Category", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Category", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Inventory", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("eCommerce_backend.Data.Models.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Purchase");

                    b.Navigation("Sku");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Order", b =>
                {
                    b.HasOne("eCommerce_backend.IdentityAuth.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.OrderItem", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Product", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.ProductAttributeItem", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Product", "Product")
                        .WithMany("ProductAttributeItems")
                        .HasForeignKey("AttributeItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.AttributeItem", "AttributeItem")
                        .WithMany("ProductAttributeItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeItem");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.ProductBadge", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Product", "Product")
                        .WithMany("ProductBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.Badge", "Badge")
                        .WithMany("ProductBadges")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.ProductCategory", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.ProductCountry", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Product", "Product")
                        .WithMany("ProductCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.Country", "Country")
                        .WithMany("ProductCountries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.ProductStore", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Country", "Country")
                        .WithMany("ProductStores")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.Store", "Store")
                        .WithMany("ProductStores")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.Product", "Product")
                        .WithMany("ProductStores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.ProductSupplier", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Country", "Country")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.Supplier", "Supplier")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.Product", "Product")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.ProductTag", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Purchase", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.PurchaseItem", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Purchase", "Purchase")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.PurchaseReceive", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Purchase", "Purchase")
                        .WithMany("PurchaseReceives")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.IdentityAuth.ApplicationUser", "ReceiveBy")
                        .WithMany()
                        .HasForeignKey("ReceiveById");

                    b.HasOne("eCommerce_backend.Data.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");

                    b.Navigation("ReceiveBy");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.PurchaseReceiveItem", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.PurchaseReceive", "PurchaseReceive")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseReceiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseReceive");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Sku", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Product", "Product")
                        .WithMany("Skus")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.SkuVariationItem", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.VariationItem", "VariationItem")
                        .WithMany("SkuVariationItems")
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.Sku", "Sku")
                        .WithMany("SkuVariationItems")
                        .HasForeignKey("VariationItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sku");

                    b.Navigation("VariationItem");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.StatusHistory", b =>
                {
                    b.HasOne("eCommerce_backend.IdentityAuth.ApplicationUser", "Setter")
                        .WithMany()
                        .HasForeignKey("SetterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Setter");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.VariationItem", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Variation", "Variation")
                        .WithMany("Items")
                        .HasForeignKey("VariationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.WarehouseArea", b =>
                {
                    b.HasOne("eCommerce_backend.Data.Models.Warehouse", "Warehouse")
                        .WithMany("WarehouseAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Data.Models.Area", "Area")
                        .WithMany("WarehouseAreas")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Area", b =>
                {
                    b.Navigation("WarehouseAreas");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Attribute", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.AttributeItem", b =>
                {
                    b.Navigation("ProductAttributeItems");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Badge", b =>
                {
                    b.Navigation("ProductBadges");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Country", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("ProductCountries");

                    b.Navigation("ProductStores");

                    b.Navigation("ProductSuppliers");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Product", b =>
                {
                    b.Navigation("ProductAttributeItems");

                    b.Navigation("ProductBadges");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductCountries");

                    b.Navigation("ProductStores");

                    b.Navigation("ProductSuppliers");

                    b.Navigation("ProductTags");

                    b.Navigation("Skus");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Purchase", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("PurchaseReceives");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.PurchaseReceive", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Sku", b =>
                {
                    b.Navigation("SkuVariationItems");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Store", b =>
                {
                    b.Navigation("ProductStores");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Supplier", b =>
                {
                    b.Navigation("ProductSuppliers");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Variation", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.VariationItem", b =>
                {
                    b.Navigation("SkuVariationItems");
                });

            modelBuilder.Entity("eCommerce_backend.Data.Models.Warehouse", b =>
                {
                    b.Navigation("WarehouseAreas");
                });
#pragma warning restore 612, 618
        }
    }
}
